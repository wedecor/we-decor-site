const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

cloudinary.config({
  cloud_name: 'dux3m2saz',
  api_key: '669972431736695',
  api_secret: 'Hm3UY3-q0MhLfgPeOrLhps_Gl3c',
});

const outputPath = path.join(__dirname, '../utils/gallery.ts');

// File formats that work well in browsers
const SUPPORTED_FORMATS = ['jpg', 'jpeg', 'png', 'webp', 'gif'];

function toAltText(filename) {
  return filename
    .replace(/[-_]/g, ' ')
    .replace(/\.[^/.]+$/, '')
    .replace(/\s+/g, ' ')
    .replace(/\b\w/g, (c) => c.toUpperCase());
}

async function fetchAllImages() {
  let nextCursor = undefined;
  const resources = [];
  do {
    const result = await cloudinary.search
      .expression('folder:we-decor/*')
      .max_results(500)
      .next_cursor(nextCursor)
      .execute();
    resources.push(...result.resources);
    nextCursor = result.next_cursor;
  } while (nextCursor);
  return resources;
}

(async () => {
  const images = await fetchAllImages();
  const galleryMap = {};

  images.forEach((img) => {
    if (!img.asset_folder || !img.asset_folder.startsWith('we-decor/')) return;

    const folder = img.asset_folder.replace('we-decor/', '');
    const format = img.format?.toLowerCase();

    // Skip unsupported formats
    if (!SUPPORTED_FORMATS.includes(format)) {
      console.log(`Skipping ${img.filename} - unsupported format: ${format}`);
      return;
    }

    // Skip images that might be corrupted or too small
    if (img.width < 100 || img.height < 100) {
      console.log(`Skipping ${img.filename} - too small: ${img.width}x${img.height}`);
      return;
    }

    if (!galleryMap[folder]) galleryMap[folder] = [];
    galleryMap[folder].push({
      src: img.secure_url,
      alt: toAltText(img.filename || path.basename(img.secure_url)),
    });
  });

  // Log summary
  Object.entries(galleryMap).forEach(([folder, images]) => {
    console.log(`${folder}: ${images.length} images`);
  });

  const fileContent =
    '// AUTO-GENERATED BY clean-gallery-mapping.js\n' +
    'const gallery = ' +
    JSON.stringify(galleryMap, null, 2) +
    ';\n\nexport default gallery;\n';

  fs.writeFileSync(outputPath, fileContent);
  console.log('\nGallery mapping cleaned and generated at utils/gallery.ts');
})();
